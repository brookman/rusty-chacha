// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.32.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<Uint8List> generateChaCha20Key({dynamic hint}) =>
    RustLib.instance.api.generateChaCha20Key(hint: hint);

/// Important: A nonce must only be used once.
/// Do not encrypt multiple pieces of data with the same nonce.
Future<Uint8List> generateChaCha20Nonce({dynamic hint}) =>
    RustLib.instance.api.generateChaCha20Nonce(hint: hint);

/// Encrypts `cleartext` using the given ChaCha20 `key` (32 bytes).
/// A randomly generated nonce is prepended to the result (first 12 bytes).
/// Optionally providing a zstd_compression_level will compress `cleartext`
/// before encryption (using ZSTD).
Future<Uint8List> encrypt(
        {required List<int> key,
        required List<int> cleartext,
        Uint8List? aad,
        int? zstdCompressionLevel,
        dynamic hint}) =>
    RustLib.instance.api.encrypt(
        key: key,
        cleartext: cleartext,
        aad: aad,
        zstdCompressionLevel: zstdCompressionLevel,
        hint: hint);

/// Decrypts `ciphertext` using the given ChaCha20 `key` (32 bytes).
/// The first 12 bytes of the `ciphertext` must contain the nonce.
/// This is already the case when using `encrypt()`.
Future<Uint8List> decrypt(
        {required List<int> key,
        required List<int> ciphertext,
        Uint8List? aad,
        dynamic hint}) =>
    RustLib.instance.api
        .decrypt(key: key, ciphertext: ciphertext, aad: aad, hint: hint);

Future<void> encryptToFile(
        {required List<int> key,
        required List<int> cleartext,
        required String filePath,
        Uint8List? aad,
        int? zstdCompressionLevel,
        dynamic hint}) =>
    RustLib.instance.api.encryptToFile(
        key: key,
        cleartext: cleartext,
        filePath: filePath,
        aad: aad,
        zstdCompressionLevel: zstdCompressionLevel,
        hint: hint);

Future<Uint8List> decryptFromFile(
        {required List<int> key,
        required String filePath,
        Uint8List? aad,
        dynamic hint}) =>
    RustLib.instance.api
        .decryptFromFile(key: key, filePath: filePath, aad: aad, hint: hint);

Future<void> writeFile(
        {required List<int> data, required String filePath, dynamic hint}) =>
    RustLib.instance.api.writeFile(data: data, filePath: filePath, hint: hint);

Future<Uint8List> readFile({required String filePath, dynamic hint}) =>
    RustLib.instance.api.readFile(filePath: filePath, hint: hint);
