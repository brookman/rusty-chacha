// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.32.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<Uint8List> generateChaCha20Key({dynamic hint}) =>
    RustLib.instance.api.generateChaCha20Key(hint: hint);

/// Important: A nonce must only be used once!
/// Do not encrypt multiple pieces of data with the same nonce.
Future<Uint8List> generateChaCha20Nonce({dynamic hint}) =>
    RustLib.instance.api.generateChaCha20Nonce(hint: hint);

/// Encrypts `cleartext` using the given ChaCha20 `key` (32 bytes).
/// A randomly generated nonce will be prepended to the result (first 12 bytes).
Future<Uint8List> encrypt(
        {required List<int> key,
        required List<int> cleartext,
        Uint8List? aad,
        dynamic hint}) =>
    RustLib.instance.api
        .encrypt(key: key, cleartext: cleartext, aad: aad, hint: hint);

/// Decrypts `ciphertext` using the given ChaCha20 `key` (32 bytes).
/// The first 12 bytes of the `ciphertext` must contain the nonce.
/// This is already the case when using `encrypt()`.
Future<Uint8List> decrypt(
        {required List<int> key,
        required List<int> ciphertext,
        Uint8List? aad,
        dynamic hint}) =>
    RustLib.instance.api
        .decrypt(key: key, ciphertext: ciphertext, aad: aad, hint: hint);

/// Encrypts `cleartext` using the given ChaCha20 `key` (32 bytes).
/// A randomly generated nonce will be prepended to the result (first 12 bytes).
/// `cleartext` will be compressed with the given `zstd_compression_level` before encryption
/// (using ZSTD).
Future<Uint8List> encryptCompressed(
        {required List<int> key,
        required List<int> cleartext,
        required int zstdCompressionLevel,
        Uint8List? aad,
        dynamic hint}) =>
    RustLib.instance.api.encryptCompressed(
        key: key,
        cleartext: cleartext,
        zstdCompressionLevel: zstdCompressionLevel,
        aad: aad,
        hint: hint);

/// Decrypts `ciphertext` using the given ChaCha20 `key` (32 bytes).
/// The first 12 bytes of the `ciphertext` must contain the nonce.
/// Use this function if the cleartext has been compressed with `encrypt_compressed()`.
Future<Uint8List> decryptCompressed(
        {required List<int> key,
        required List<int> ciphertext,
        Uint8List? aad,
        dynamic hint}) =>
    RustLib.instance.api.decryptCompressed(
        key: key, ciphertext: ciphertext, aad: aad, hint: hint);

/// Encrypts `cleartext` using the given ChaCha20 `key` (32 bytes).
/// A randomly generated nonce will be prepended to the result (first 12 bytes).
/// The result is written to `file_path`.
Future<void> encryptToFile(
        {required List<int> key,
        required List<int> cleartext,
        required String filePath,
        Uint8List? aad,
        dynamic hint}) =>
    RustLib.instance.api.encryptToFile(
        key: key,
        cleartext: cleartext,
        filePath: filePath,
        aad: aad,
        hint: hint);

/// Reads `file_path` and decrypts the contents using the given ChaCha20 `key` (32 bytes).
/// The first 12 bytes of the must contain the nonce.
Future<Uint8List> decryptFromFile(
        {required List<int> key,
        required String filePath,
        Uint8List? aad,
        dynamic hint}) =>
    RustLib.instance.api
        .decryptFromFile(key: key, filePath: filePath, aad: aad, hint: hint);

/// Encrypts `cleartext` using the given ChaCha20 `key` (32 bytes).
/// A randomly generated nonce will be prepended to the result (first 12 bytes).
/// `cleartext` will be compressed with the given `zstd_compression_level` before encryption
/// (using ZSTD).
/// The result is written to `file_path`.
Future<void> encryptToFileCompressed(
        {required List<int> key,
        required List<int> cleartext,
        required String filePath,
        required int zstdCompressionLevel,
        Uint8List? aad,
        dynamic hint}) =>
    RustLib.instance.api.encryptToFileCompressed(
        key: key,
        cleartext: cleartext,
        filePath: filePath,
        zstdCompressionLevel: zstdCompressionLevel,
        aad: aad,
        hint: hint);

/// Reads `file_path` and decrypts the contents using the given ChaCha20 `key` (32 bytes)
/// and decompresses it using ZSTD.
/// The first 12 bytes of the must contain the nonce.
Future<Uint8List> decryptFromFileCompressed(
        {required List<int> key,
        required String filePath,
        Uint8List? aad,
        dynamic hint}) =>
    RustLib.instance.api.decryptFromFileCompressed(
        key: key, filePath: filePath, aad: aad, hint: hint);

/// public for benchmarking
Future<Uint8List> compress(
        {required List<int> data,
        required int zstdCompressionLevel,
        dynamic hint}) =>
    RustLib.instance.api.compress(
        data: data, zstdCompressionLevel: zstdCompressionLevel, hint: hint);

/// public for benchmarking
Future<Uint8List> decompress({required List<int> data, dynamic hint}) =>
    RustLib.instance.api.decompress(data: data, hint: hint);
