// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.31.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:collection/collection.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<U8Array32> generateRandomChaCha20Key({dynamic hint}) =>
    RustLib.instance.api.generateRandomChaCha20Key(hint: hint);

Future<U8Array12> generateRandomChaCha20Nonce({dynamic hint}) =>
    RustLib.instance.api.generateRandomChaCha20Nonce(hint: hint);

Future<Key> generateKey({dynamic hint}) =>
    RustLib.instance.api.generateKey(hint: hint);

Future<Uint8List> readFile({required String filePath, dynamic hint}) =>
    RustLib.instance.api.readFile(filePath: filePath, hint: hint);

Future<void> writeFile(
        {required List<int> data, required String filePath, dynamic hint}) =>
    RustLib.instance.api.writeFile(data: data, filePath: filePath, hint: hint);

Future<Uint8List> encrypt(
        {required Key key, required List<int> cleartext, dynamic hint}) =>
    RustLib.instance.api.encrypt(key: key, cleartext: cleartext, hint: hint);

Future<Uint8List> decrypt(
        {required Key key, required List<int> encrypted, dynamic hint}) =>
    RustLib.instance.api.decrypt(key: key, encrypted: encrypted, hint: hint);

Future<void> encryptAndWriteToFile(
        {required Key key,
        required List<int> cleartext,
        required String filePath,
        dynamic hint}) =>
    RustLib.instance.api.encryptAndWriteToFile(
        key: key, cleartext: cleartext, filePath: filePath, hint: hint);

Future<Uint8List> readFromFileAndDecrypt(
        {required Key key, required String filePath, dynamic hint}) =>
    RustLib.instance.api
        .readFromFileAndDecrypt(key: key, filePath: filePath, hint: hint);

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Key>>
@sealed
class Key extends RustOpaque {
  Key.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  Key.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Key,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Key,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeyPtr,
  );
}

class U8Array12 extends NonGrowableListView<int> {
  static const arraySize = 12;

  @internal
  Uint8List get inner => _inner;
  final Uint8List _inner;

  U8Array12(this._inner)
      : assert(_inner.length == arraySize),
        super(_inner);

  U8Array12.init() : this(Uint8List(arraySize));
}

class U8Array32 extends NonGrowableListView<int> {
  static const arraySize = 32;

  @internal
  Uint8List get inner => _inner;
  final Uint8List _inner;

  U8Array32(this._inner)
      : assert(_inner.length == arraySize),
        super(_inner);

  U8Array32.init() : this(Uint8List(arraySize));
}
