// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = DcoCodec,
    default_rust_opaque = RustOpaqueNom,
    default_rust_auto_opaque = RustAutoOpaqueNom,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.4.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 1378991708;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__compress_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    data: impl CstDecode<Vec<u8>>,
    zstd_compression_level: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "compress",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_data = data.cst_decode();
            let api_zstd_compression_level = zstd_compression_level.cst_decode();
            move |context| {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::compress(api_data, api_zstd_compression_level)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__decompress_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    data: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "decompress",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_data = data.cst_decode();
            move |context| {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::decompress(api_data)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__rusty_cha_cha_20_poly_1305_create_internal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<Option<Vec<u8>>>,
    compression: impl CstDecode<Option<crate::api::Compression>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rusty_cha_cha_20_poly_1305_create_internal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_key = key.cst_decode();
            let api_compression = compression.cst_decode();
            move |context| {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::RustyChaCha20Poly1305::create_internal(
                            api_key,
                            api_compression,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__rusty_cha_cha_20_poly_1305_decrypt_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::RustyChaCha20Poly1305>,
    ciphertext: impl CstDecode<Vec<u8>>,
    aad: impl CstDecode<Option<Vec<u8>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rusty_cha_cha_20_poly_1305_decrypt",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ciphertext = ciphertext.cst_decode();
            let api_aad = aad.cst_decode();
            move |context| {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::RustyChaCha20Poly1305::decrypt(
                            &api_that,
                            api_ciphertext,
                            api_aad,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__rusty_cha_cha_20_poly_1305_decrypt_from_file_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::RustyChaCha20Poly1305>,
    file_path: impl CstDecode<String>,
    aad: impl CstDecode<Option<Vec<u8>>>,
    offset: impl CstDecode<Option<u64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rusty_cha_cha_20_poly_1305_decrypt_from_file",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_file_path = file_path.cst_decode();
            let api_aad = aad.cst_decode();
            let api_offset = offset.cst_decode();
            move |context| {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::RustyChaCha20Poly1305::decrypt_from_file(
                            &api_that,
                            api_file_path,
                            api_aad,
                            api_offset,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__rusty_cha_cha_20_poly_1305_encrypt_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::RustyChaCha20Poly1305>,
    cleartext: impl CstDecode<Vec<u8>>,
    nonce: impl CstDecode<Option<Vec<u8>>>,
    aad: impl CstDecode<Option<Vec<u8>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rusty_cha_cha_20_poly_1305_encrypt",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_cleartext = cleartext.cst_decode();
            let api_nonce = nonce.cst_decode();
            let api_aad = aad.cst_decode();
            move |context| {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::RustyChaCha20Poly1305::encrypt(
                            &api_that,
                            api_cleartext,
                            api_nonce,
                            api_aad,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__rusty_cha_cha_20_poly_1305_encrypt_to_file_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::RustyChaCha20Poly1305>,
    cleartext: impl CstDecode<Vec<u8>>,
    file_path: impl CstDecode<String>,
    nonce: impl CstDecode<Option<Vec<u8>>>,
    aad: impl CstDecode<Option<Vec<u8>>>,
    append: impl CstDecode<Option<bool>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rusty_cha_cha_20_poly_1305_encrypt_to_file",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_cleartext = cleartext.cst_decode();
            let api_file_path = file_path.cst_decode();
            let api_nonce = nonce.cst_decode();
            let api_aad = aad.cst_decode();
            let api_append = append.cst_decode();
            move |context| {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::RustyChaCha20Poly1305::encrypt_to_file(
                            &api_that,
                            api_cleartext,
                            api_file_path,
                            api_nonce,
                            api_aad,
                            api_append,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__rusty_cha_cha_20_poly_1305_generate_key_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rusty_cha_cha_20_poly_1305_generate_key",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::RustyChaCha20Poly1305::generate_key())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__rusty_cha_cha_20_poly_1305_generate_nonce_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rusty_cha_cha_20_poly_1305_generate_nonce",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::RustyChaCha20Poly1305::generate_nonce())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__rusty_x_cha_cha_20_poly_1305_create_internal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<Option<Vec<u8>>>,
    compression: impl CstDecode<Option<crate::api::Compression>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rusty_x_cha_cha_20_poly_1305_create_internal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_key = key.cst_decode();
            let api_compression = compression.cst_decode();
            move |context| {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::RustyXChaCha20Poly1305::create_internal(
                            api_key,
                            api_compression,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__rusty_x_cha_cha_20_poly_1305_decrypt_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::RustyXChaCha20Poly1305>,
    ciphertext: impl CstDecode<Vec<u8>>,
    aad: impl CstDecode<Option<Vec<u8>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rusty_x_cha_cha_20_poly_1305_decrypt",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ciphertext = ciphertext.cst_decode();
            let api_aad = aad.cst_decode();
            move |context| {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::RustyXChaCha20Poly1305::decrypt(
                            &api_that,
                            api_ciphertext,
                            api_aad,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__rusty_x_cha_cha_20_poly_1305_decrypt_from_file_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::RustyXChaCha20Poly1305>,
    file_path: impl CstDecode<String>,
    aad: impl CstDecode<Option<Vec<u8>>>,
    offset: impl CstDecode<Option<u64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rusty_x_cha_cha_20_poly_1305_decrypt_from_file",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_file_path = file_path.cst_decode();
            let api_aad = aad.cst_decode();
            let api_offset = offset.cst_decode();
            move |context| {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::RustyXChaCha20Poly1305::decrypt_from_file(
                            &api_that,
                            api_file_path,
                            api_aad,
                            api_offset,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__rusty_x_cha_cha_20_poly_1305_encrypt_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::RustyXChaCha20Poly1305>,
    cleartext: impl CstDecode<Vec<u8>>,
    nonce: impl CstDecode<Option<Vec<u8>>>,
    aad: impl CstDecode<Option<Vec<u8>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rusty_x_cha_cha_20_poly_1305_encrypt",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_cleartext = cleartext.cst_decode();
            let api_nonce = nonce.cst_decode();
            let api_aad = aad.cst_decode();
            move |context| {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::RustyXChaCha20Poly1305::encrypt(
                            &api_that,
                            api_cleartext,
                            api_nonce,
                            api_aad,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__rusty_x_cha_cha_20_poly_1305_encrypt_to_file_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::RustyXChaCha20Poly1305>,
    cleartext: impl CstDecode<Vec<u8>>,
    file_path: impl CstDecode<String>,
    nonce: impl CstDecode<Option<Vec<u8>>>,
    aad: impl CstDecode<Option<Vec<u8>>>,
    append: impl CstDecode<Option<bool>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rusty_x_cha_cha_20_poly_1305_encrypt_to_file",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_cleartext = cleartext.cst_decode();
            let api_file_path = file_path.cst_decode();
            let api_nonce = nonce.cst_decode();
            let api_aad = aad.cst_decode();
            let api_append = append.cst_decode();
            move |context| {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::RustyXChaCha20Poly1305::encrypt_to_file(
                            &api_that,
                            api_cleartext,
                            api_file_path,
                            api_nonce,
                            api_aad,
                            api_append,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__rusty_x_cha_cha_20_poly_1305_generate_key_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rusty_x_cha_cha_20_poly_1305_generate_key",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::RustyXChaCha20Poly1305::generate_key())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__rusty_x_cha_cha_20_poly_1305_generate_nonce_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rusty_x_cha_cha_20_poly_1305_generate_nonce",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::RustyXChaCha20Poly1305::generate_nonce())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: dart2rust

impl CstDecode<bool> for bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<i32> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<u64> for u64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u64 {
        self
    }
}
impl CstDecode<u8> for u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self
    }
}
impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::Compression {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::Compression::Uncompressed;
            }
            1 => {
                let mut var_compressionLevel = <Option<i32>>::sse_decode(deserializer);
                return crate::api::Compression::Zstd {
                    compression_level: var_compressionLevel,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::Compression> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::Compression>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<u8>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::RustyChaCha20Poly1305 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <Vec<u8>>::sse_decode(deserializer);
        let mut var_compression = <crate::api::Compression>::sse_decode(deserializer);
        return crate::api::RustyChaCha20Poly1305 {
            key: var_key,
            compression: var_compression,
        };
    }
}

impl SseDecode for crate::api::RustyXChaCha20Poly1305 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <Vec<u8>>::sse_decode(deserializer);
        let mut var_compression = <crate::api::Compression>::sse_decode(deserializer);
        return crate::api::RustyXChaCha20Poly1305 {
            key: var_key,
            compression: var_compression,
        };
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::Compression {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::Compression::Uncompressed => [0.into_dart()].into_dart(),
            crate::api::Compression::Zstd { compression_level } => [
                1.into_dart(),
                compression_level.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::Compression {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::Compression> for crate::api::Compression {
    fn into_into_dart(self) -> crate::api::Compression {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::RustyChaCha20Poly1305 {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.compression.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::RustyChaCha20Poly1305
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::RustyChaCha20Poly1305>
    for crate::api::RustyChaCha20Poly1305
{
    fn into_into_dart(self) -> crate::api::RustyChaCha20Poly1305 {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::RustyXChaCha20Poly1305 {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.compression.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::RustyXChaCha20Poly1305
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::RustyXChaCha20Poly1305>
    for crate::api::RustyXChaCha20Poly1305
{
    fn into_into_dart(self) -> crate::api::RustyXChaCha20Poly1305 {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::Compression {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::Compression::Uncompressed => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::Compression::Zstd { compression_level } => {
                <i32>::sse_encode(1, serializer);
                <Option<i32>>::sse_encode(compression_level, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::Compression> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::Compression>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<u8>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::RustyChaCha20Poly1305 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.key, serializer);
        <crate::api::Compression>::sse_encode(self.compression, serializer);
    }
}

impl SseEncode for crate::api::RustyXChaCha20Poly1305 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.key, serializer);
        <crate::api::Compression>::sse_encode(self.compression, serializer);
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.4.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    // Section: dart2rust

    impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
        for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
            unimplemented!()
        }
    }
    impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> String {
            let vec: Vec<u8> = self.cst_decode();
            String::from_utf8(vec).unwrap()
        }
    }
    impl CstDecode<bool> for *mut bool {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> bool {
            unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
        }
    }
    impl CstDecode<crate::api::Compression> for *mut wire_cst_compression {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::Compression {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::Compression>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<i32> for *mut i32 {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> i32 {
            unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
        }
    }
    impl CstDecode<crate::api::RustyChaCha20Poly1305> for *mut wire_cst_rusty_cha_cha_20_poly_1305 {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::RustyChaCha20Poly1305 {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::RustyChaCha20Poly1305>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::RustyXChaCha20Poly1305> for *mut wire_cst_rusty_x_cha_cha_20_poly_1305 {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::RustyXChaCha20Poly1305 {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::RustyXChaCha20Poly1305>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<u64> for *mut u64 {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> u64 {
            unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
        }
    }
    impl CstDecode<crate::api::Compression> for wire_cst_compression {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::Compression {
            match self.tag {
                0 => crate::api::Compression::Uncompressed,
                1 => {
                    let ans = unsafe { self.kind.Zstd };
                    crate::api::Compression::Zstd {
                        compression_level: ans.compression_level.cst_decode(),
                    }
                }
                _ => unreachable!(),
            }
        }
    }
    impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_loose {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl CstDecode<crate::api::RustyChaCha20Poly1305> for wire_cst_rusty_cha_cha_20_poly_1305 {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::RustyChaCha20Poly1305 {
            crate::api::RustyChaCha20Poly1305 {
                key: self.key.cst_decode(),
                compression: self.compression.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::api::RustyXChaCha20Poly1305> for wire_cst_rusty_x_cha_cha_20_poly_1305 {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::RustyXChaCha20Poly1305 {
            crate::api::RustyXChaCha20Poly1305 {
                key: self.key.cst_decode(),
                compression: self.compression.cst_decode(),
            }
        }
    }
    impl NewWithNullPtr for wire_cst_compression {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: CompressionKind { nil__: () },
            }
        }
    }
    impl Default for wire_cst_compression {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_rusty_cha_cha_20_poly_1305 {
        fn new_with_null_ptr() -> Self {
            Self {
                key: core::ptr::null_mut(),
                compression: Default::default(),
            }
        }
    }
    impl Default for wire_cst_rusty_cha_cha_20_poly_1305 {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_rusty_x_cha_cha_20_poly_1305 {
        fn new_with_null_ptr() -> Self {
            Self {
                key: core::ptr::null_mut(),
                compression: Default::default(),
            }
        }
    }
    impl Default for wire_cst_rusty_x_cha_cha_20_poly_1305 {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_wire__crate__api__compress(
        port_: i64,
        data: *mut wire_cst_list_prim_u_8_loose,
        zstd_compression_level: i32,
    ) {
        wire__crate__api__compress_impl(port_, data, zstd_compression_level)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_wire__crate__api__decompress(
        port_: i64,
        data: *mut wire_cst_list_prim_u_8_loose,
    ) {
        wire__crate__api__decompress_impl(port_, data)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_wire__crate__api__rusty_cha_cha_20_poly_1305_create_internal(
        port_: i64,
        key: *mut wire_cst_list_prim_u_8_strict,
        compression: *mut wire_cst_compression,
    ) {
        wire__crate__api__rusty_cha_cha_20_poly_1305_create_internal_impl(port_, key, compression)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_wire__crate__api__rusty_cha_cha_20_poly_1305_decrypt(
        port_: i64,
        that: *mut wire_cst_rusty_cha_cha_20_poly_1305,
        ciphertext: *mut wire_cst_list_prim_u_8_loose,
        aad: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__rusty_cha_cha_20_poly_1305_decrypt_impl(port_, that, ciphertext, aad)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_wire__crate__api__rusty_cha_cha_20_poly_1305_decrypt_from_file(
        port_: i64,
        that: *mut wire_cst_rusty_cha_cha_20_poly_1305,
        file_path: *mut wire_cst_list_prim_u_8_strict,
        aad: *mut wire_cst_list_prim_u_8_strict,
        offset: *mut u64,
    ) {
        wire__crate__api__rusty_cha_cha_20_poly_1305_decrypt_from_file_impl(
            port_, that, file_path, aad, offset,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_wire__crate__api__rusty_cha_cha_20_poly_1305_encrypt(
        port_: i64,
        that: *mut wire_cst_rusty_cha_cha_20_poly_1305,
        cleartext: *mut wire_cst_list_prim_u_8_loose,
        nonce: *mut wire_cst_list_prim_u_8_strict,
        aad: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__rusty_cha_cha_20_poly_1305_encrypt_impl(
            port_, that, cleartext, nonce, aad,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_wire__crate__api__rusty_cha_cha_20_poly_1305_encrypt_to_file(
        port_: i64,
        that: *mut wire_cst_rusty_cha_cha_20_poly_1305,
        cleartext: *mut wire_cst_list_prim_u_8_loose,
        file_path: *mut wire_cst_list_prim_u_8_strict,
        nonce: *mut wire_cst_list_prim_u_8_strict,
        aad: *mut wire_cst_list_prim_u_8_strict,
        append: *mut bool,
    ) {
        wire__crate__api__rusty_cha_cha_20_poly_1305_encrypt_to_file_impl(
            port_, that, cleartext, file_path, nonce, aad, append,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_wire__crate__api__rusty_cha_cha_20_poly_1305_generate_key(
        port_: i64,
    ) {
        wire__crate__api__rusty_cha_cha_20_poly_1305_generate_key_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_wire__crate__api__rusty_cha_cha_20_poly_1305_generate_nonce(
        port_: i64,
    ) {
        wire__crate__api__rusty_cha_cha_20_poly_1305_generate_nonce_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_wire__crate__api__rusty_x_cha_cha_20_poly_1305_create_internal(
        port_: i64,
        key: *mut wire_cst_list_prim_u_8_strict,
        compression: *mut wire_cst_compression,
    ) {
        wire__crate__api__rusty_x_cha_cha_20_poly_1305_create_internal_impl(port_, key, compression)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_wire__crate__api__rusty_x_cha_cha_20_poly_1305_decrypt(
        port_: i64,
        that: *mut wire_cst_rusty_x_cha_cha_20_poly_1305,
        ciphertext: *mut wire_cst_list_prim_u_8_loose,
        aad: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__rusty_x_cha_cha_20_poly_1305_decrypt_impl(port_, that, ciphertext, aad)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_wire__crate__api__rusty_x_cha_cha_20_poly_1305_decrypt_from_file(
        port_: i64,
        that: *mut wire_cst_rusty_x_cha_cha_20_poly_1305,
        file_path: *mut wire_cst_list_prim_u_8_strict,
        aad: *mut wire_cst_list_prim_u_8_strict,
        offset: *mut u64,
    ) {
        wire__crate__api__rusty_x_cha_cha_20_poly_1305_decrypt_from_file_impl(
            port_, that, file_path, aad, offset,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_wire__crate__api__rusty_x_cha_cha_20_poly_1305_encrypt(
        port_: i64,
        that: *mut wire_cst_rusty_x_cha_cha_20_poly_1305,
        cleartext: *mut wire_cst_list_prim_u_8_loose,
        nonce: *mut wire_cst_list_prim_u_8_strict,
        aad: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__rusty_x_cha_cha_20_poly_1305_encrypt_impl(
            port_, that, cleartext, nonce, aad,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_wire__crate__api__rusty_x_cha_cha_20_poly_1305_encrypt_to_file(
        port_: i64,
        that: *mut wire_cst_rusty_x_cha_cha_20_poly_1305,
        cleartext: *mut wire_cst_list_prim_u_8_loose,
        file_path: *mut wire_cst_list_prim_u_8_strict,
        nonce: *mut wire_cst_list_prim_u_8_strict,
        aad: *mut wire_cst_list_prim_u_8_strict,
        append: *mut bool,
    ) {
        wire__crate__api__rusty_x_cha_cha_20_poly_1305_encrypt_to_file_impl(
            port_, that, cleartext, file_path, nonce, aad, append,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_wire__crate__api__rusty_x_cha_cha_20_poly_1305_generate_key(
        port_: i64,
    ) {
        wire__crate__api__rusty_x_cha_cha_20_poly_1305_generate_key_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_wire__crate__api__rusty_x_cha_cha_20_poly_1305_generate_nonce(
        port_: i64,
    ) {
        wire__crate__api__rusty_x_cha_cha_20_poly_1305_generate_nonce_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_cst_new_box_autoadd_bool(value: bool) -> *mut bool {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_cst_new_box_autoadd_compression(
    ) -> *mut wire_cst_compression {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_compression::new_with_null_ptr(),
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_cst_new_box_autoadd_i_32(value: i32) -> *mut i32 {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_cst_new_box_autoadd_rusty_cha_cha_20_poly_1305(
    ) -> *mut wire_cst_rusty_cha_cha_20_poly_1305 {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_rusty_cha_cha_20_poly_1305::new_with_null_ptr(),
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_cst_new_box_autoadd_rusty_x_cha_cha_20_poly_1305(
    ) -> *mut wire_cst_rusty_x_cha_cha_20_poly_1305 {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_rusty_x_cha_cha_20_poly_1305::new_with_null_ptr(),
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_cst_new_box_autoadd_u_64(value: u64) -> *mut u64 {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_cst_new_list_prim_u_8_loose(
        len: i32,
    ) -> *mut wire_cst_list_prim_u_8_loose {
        let ans = wire_cst_list_prim_u_8_loose {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rusty_chacha_dart_cst_new_list_prim_u_8_strict(
        len: i32,
    ) -> *mut wire_cst_list_prim_u_8_strict {
        let ans = wire_cst_list_prim_u_8_strict {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
    }

    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_compression {
        tag: i32,
        kind: CompressionKind,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub union CompressionKind {
        Zstd: wire_cst_Compression_Zstd,
        nil__: (),
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_Compression_Zstd {
        compression_level: *mut i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_prim_u_8_loose {
        ptr: *mut u8,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_prim_u_8_strict {
        ptr: *mut u8,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_rusty_cha_cha_20_poly_1305 {
        key: *mut wire_cst_list_prim_u_8_strict,
        compression: wire_cst_compression,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_rusty_x_cha_cha_20_poly_1305 {
        key: *mut wire_cst_list_prim_u_8_strict,
        compression: wire_cst_compression,
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
